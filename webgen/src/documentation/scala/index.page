---
title: Slang Scala User Guide
--- name:head pipeline:tags
<link href="{relocatable: /styles/book.css}" rel="stylesheet" type="text/css" />

--- name:content pipeline:tags,asciidoc

{title:}
====================
Gert Vanthienen
:Author Initials: gertv
{project_version:}, 2010

Slang(Scala) allows you to deploy Scala source files directly on link:http://felix.apache.org/site/apache-felix-karaf.html[Apache Felix Karaf]

== Installing Slang(Scala) on Karaf

Before you can get started with Slang's Scala support

=== Requirements

* Apache Felix Karaf 2.0.0

=== Build

The best way to get the Scala support for Slang is currently by link:/source.html[getting the source code] and link:/building.html[building it]

=== Install on Karaf

Install the slang-scala feature on Karaf by running these commands from the Karaf console:

----
features:addUrl mvn:org.fusesource.slang/features/1.0.0-SNAPSHOT/xml/features
features:install slang-scala
----

You can verify that the feature was installed correctly by running the osgi:list command

----
karaf@root> osgi:list
START LEVEL 100
   ID   State         Blueprint      Spring    Level  Name
...
[  31] [Active     ] [Created     ] [       ] [   20] Apache Geronimo Blueprint Bundle (1.0.0)
[  32] [Active     ] [            ] [       ] [   60] Apache ServiceMix Bundles: scala-library-2.8.0 (2.8.0.SNAPSHOT)
[  33] [Active     ] [            ] [       ] [   60] Apache ServiceMix Bundles: scala-compiler-2.8.0 (2.8.0.SNAPSHOT)
[  34] [Active     ] [Created     ] [       ] [   60] Slang :: Scala :: Deployer (1.0.0.SNAPSHOT)
[  35] [Active     ] [            ] [       ] [   60] Slang :: Scala :: Common (1.0.0.SNAPSHOT)
----

== Deploy your first Scala file

[[CreateScalaFile]]
=== Create the Scala file

Now you're ready to deploy your first Scala file.  In the Karaf deploy folder, create a file name hello.scala

----
package org.fusesource.slang.scala.example {

class HelloWorld {
  // this class doesn't do anything yet
  // just making sure deployment works fine
}

}
----

The source file will automatically get compiled, transformed into an OSGi bundled and deployed.

[[VerifyDeployment]]
=== Verify the deployment

To make sure everything went OK, run osgi:list again:

----
karaf@root> osgi:list
START LEVEL 100
   ID   State         Blueprint      Level  Name
...
[  35] [Active     ] [            ] [   60] some_name (0)
----

Now that you know the bundle id of the deployed scala file, you can also take a closer look at the OSGi bundle headers.
You'll notice the bundle exports the org.fusesource.slang.scala.example package we defined in the source file.

----
karaf@root> osgi:headers 35
...
Export-Package = org.fusesource.slang.scala.example;uses:=scala
----


== Adding a BundleActivator

Slang(Scala) will automatically discover a org.osgi.framework.BundleActivator implementation in your Scala file and set it as the activator for the compiled bundle.

=== Create the Scala file

Let's create a second Scala file called activator.scala in our deploy directory, now with a BundleActivator in it.

----
import org.osgi.framework.{BundleContext,BundleActivator}

package org.fusesource.slang.scala.activator {

  class MyActivator extends BundleActivator {

    def start(context: BundleContext) = println("Starting the bundle")

    def stop(context: BundleContext) = println("Stopping the bundle")

  }

}
----

As soon as you save the file, it gets compiled and you'll see the "Starting the bundle" message appear in the console.

=== Looking at the generated bundle

If you now do osgi:headers on the newly generated bundle, you'll see the BundleActivator class in the OSGi headers:

----
karaf@root> osgi:headers 37
...
Bundle-Activator = org.fusesource.slang.scala.activator.MyActivator
...
----

Stopping and starting the bundle again will also show the messages on the console again:

----
karaf@root> osgi:stop 37
Stopping the bundle
karaf@root> osgi:start 37
Starting the bundle
----

== Actors

Slang(Scala) allows you to leverage the full power of the Scala library on Karaf.  One example of a neat feature in Scala is the use of actors for builing concurrent applications.

=== Deploy your first actors bundle

Once again, create a new Scala source file called actor.scala which sets up the Actor instances and starts/stops them from the BundleActivator:

----
import scala.actors.Actor
import scala.actors.Actor._
import org.osgi.framework.{BundleContext, BundleActivator}

package org.fusesource.slang.scala.actor {

  // the messages we're going going to send
  case object Ping
  case object Pong
  case object Stop

  class Ping(count: int, pong: Actor) extends Actor {
    def act() {
      var pingsLeft = count - 1
      pong ! Ping
      while (true) {
        receive {
          case Pong =>
            if (pingsLeft % 1000 == 0)
              Console.println("Ping: pong")
            if (pingsLeft > 0) {
              pong ! Ping
              pingsLeft -= 1
            } else {
              Console.println("Ping: stop")
              pong ! Stop
              exit
            }
          case Stop =>
            Console.println("Ping: stop")
            pong ! Stop
            exit
        }
      }
    }
  }

  class Pong extends Actor {
    def act() {
      var pongCount = 0
      while (true) {
        receive {
          case Ping =>
            if (pongCount % 1000 == 0)
              Console.println("Pong: ping "+pongCount)
            sender ! Pong
            pongCount = pongCount + 1
          case Stop =>
            Console.println("Pong: stop")
            exit
        }
      }
    }
  }

  class Activator extends BundleActivator {

    val pong = new Pong
    val ping = new Ping(10000, pong)

    def start(context: BundleContext) = {
      // start both actors
      ping.start
      pong.start
    }

    def stop(context: BundleContext) = {
      // send the Stop message to the ping actor, who will forward it to pong
      ping ! Stop
    }
  }
}
----